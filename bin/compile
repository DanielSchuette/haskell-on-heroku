#!/usr/bin/env bash

set -eu

export BUILDPACK_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd -P )


log_indent_label () {
	local label
	label="$1$( printf ' %.0s' {0..41} )" || true
	shift

	echo "       ${label:0:41}" "$( echo -en '\033[1m' )${*}$( echo -en '\033[0m' )" >&2
}


set_url_config_var () {
	if [[ ! -f "$1/$2" ]]; then
		return 0
	fi

	local url
	url=$( <"$1/$2" ) || return 1
	export "$2"="${url}"

	# NOTE: The master branch is used by default, but the branch name is
	# omitted from the message.
	local base_url branch
	base_url="${url%#*}"
	branch="${url#*#}"
	if [[ "${branch}" == "${base_url}" ]]; then
		branch=''
	fi
	log_indent_label "$2:" "${base_url%.git}${branch:+#${branch}}"
}


set_config_vars () {
	unset GIT_DIR

	if [[ ! -d "$1" ]]; then
		return 0
	fi

	set_url_config_var "$1" 'BUILDPACK_URL' || return 1
	set_url_config_var "$1" 'HALCYON_URL' || return 1
	set_url_config_var "$1" 'BASHMENOT_URL' || return 1

	local ignored_pattern halcyon_pattern bashmenot_pattern secret_pattern
	ignored_pattern='BUILDPACK_INTERNAL_|BUILDPACK_URL|GIT_DIR|LD_LIBRARY_PATH|LD_PRELOAD|LIBRARY_PATH|PATH'
	halcyon_pattern='HALCYON_INTERNAL_|HALCYON_DIR|HALCYON_BASE|HALCYON_PREFIX|HALCYON_ROOT|HALCYON_CACHE|HALCYON_URL'
	bashmenot_pattern='BASHMENOT_INTERNAL_|BASHMENOT_DIR|BASHMENOT_URL'
	secret_pattern='DATABASE|KEY|PASSPHRASE|PASSWORD|POSTGRESQL|PRIVATE|SECRET'

	local vars
	vars=$(
		find "$1" -maxdepth 1 -type f |
		sed "s:$1/::" |
		sort
	) || return 1
	if [[ -z "${vars}" ]]; then
		return 0
	fi

	local var
	while read -r var; do
		if grep -qE "(${ignored_pattern})" <<<"${var}"; then
			continue
		fi
		if grep -E "^HALCYON_" <<<"${var}" | grep -qE "(${halcyon_pattern})"; then
			continue
		fi
		if grep -E "^BASHMENOT_" <<<"${var}" | grep -qE "(${bashmenot_pattern})"; then
			continue
		fi

		local value
		value=$( <"$1/${var}" ) || return 1
		export "${var}"="${value}"

		if grep -qE "(${secret_pattern})" <<<"${var}"; then
			log_indent_label "${var}:" '(secret)'
		else
			log_indent_label "${var}:" "${value}"
		fi
	done <<<"${vars}"
}


install_buildpack () {
	echo >&2
	echo >&2
	echo '-----> Welcome to Haskell on Heroku' >&2

	if ! set_config_vars "${3:-/dev/null}"; then
		echo '   *** ERROR: Failed to set config vars' >&2
		return 1
	fi

	echo >&2
	echo -n '-----> Installing buildpack...' >&2

	local commit_hash
	if ! commit_hash=$(
		cd "${BUILDPACK_DIR}" &&
		git log -n 1 --pretty='format:%h'
	); then
		echo 'error' >&2
		return 1
	fi
	echo " done, ${commit_hash:0:7}" >&2

	BUILDPACK_NO_SELF_UPDATE=1 \
		source "${BUILDPACK_DIR}/src.sh" || return 1
}


if ! install_buildpack "$@"; then
	echo '   *** ERROR: Failed to install buildpack' >&2
	exit 1
fi

buildpack_compile "$@"
